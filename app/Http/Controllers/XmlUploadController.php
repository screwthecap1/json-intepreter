<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\ClassRelationship;
use SimpleXMLElement;

class XmlUploadController extends Controller
{
    public function index()
    {
        $relationships = ClassRelationship::all();

        // –ù–æ–≤—ã–π –∫–æ–¥: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º—ã
        $terms = ClassRelationship::select('class1')
            ->union(ClassRelationship::select('class2'))
            ->distinct()
            ->orderBy('class1')
            ->pluck('class1')
            ->toArray();

        // –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Blade
        return view('upload', compact('relationships', 'terms'));
    }


    public function upload(Request $request)
    {
        logger('‚è≥ upload() —Å—Ç–∞—Ä—Ç—É–µ—Ç');

        $request->validate([
            'xml_file' => 'required|file',
        ]);
        logger('‚úÖ –§–∞–π–ª –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é');

        $xml = new SimpleXMLElement(file_get_contents($request->file('xml_file')));

        // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ XML ‚Äî draw.io —Å–æ—Ö—Ä–∞–Ω–∏–ª <diagram> —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º
        $cells = $xml->diagram->mxGraphModel->root->children();
        logger('üìä –ù–∞–π–¥–µ–Ω–æ —è—á–µ–µ–∫: ' . count($cells));

        ClassRelationship::truncate();
        logger('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã');

        $classes = [];

        foreach ($cells as $cell) {
            $attr = $cell->attributes();
            if (isset($attr['value'])) {
                $id = (string)$attr['id'];
                $value = (string)$attr['value'];
                $classes[$id] = $value;
                logger("üß† –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Ä–º: $id = $value");
            }
        }

        foreach ($cells as $cell) {
            $attr = $cell->attributes();
            if (isset($attr['source']) && isset($attr['target'])) {
                $source = $classes[(string)$attr['source']] ?? 'Unknown';
                $target = $classes[(string)$attr['target']] ?? 'Unknown';

                ClassRelationship::create([
                    'class1' => $source,
                    'relationship' => '–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç',
                    'class2' => $target,
                ]);

                ClassRelationship::create([
                    'class1' => $target,
                    'relationship' => '–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è',
                    'class2' => $source,
                ]);

                logger("üîó –°–≤—è–∑—å: $source ‚Üí $target");
            }
        }

        logger('‚úÖ upload() –∑–∞–≤–µ—Ä—à—ë–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –æ–±—Ä–∞—Ç–Ω–æ');

        return redirect()->route('xml.index')->with('success', '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
    }

    public function filter(Request $request)
    {
        $type = $request->input('filter_type');
        $term = $request->input('term_filter');

        $query = ClassRelationship::query();

        if ($type && $type !== 'all') {
            $query->where('relationship', $type);
        }

        if ($term) {
            $query->where(function ($q) use ($term) {
                $q->where('class1', $term)
                    ->orWhere('class2', $term);
            });
        }

        $relationships = $query->get();

        $terms = ClassRelationship::select('class1')
            ->union(ClassRelationship::select('class2'))
            ->distinct()
            ->orderBy('class1')
            ->pluck('class1')
            ->toArray();

        return view('upload', compact('relationships', 'terms'));
    }
}


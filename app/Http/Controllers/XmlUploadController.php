<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\ClassRelationship;
use SimpleXMLElement;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\App;

class XmlUploadController extends Controller
{
    public function index()
    {
        $relationships = ClassRelationship::all();

        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        $defaultDefinitions = [
            '–ù–∞—á–∞–ª–æ' => '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
            '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è' => '–≠—Ç–∞–ø, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.',
            '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
            '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å' => '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' => '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ.',
            '–ö–æ–Ω–µ—Ü' => '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.'
        ];

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
        foreach ($defaultDefinitions as $term => $definition) {
            ClassRelationship::where('class1', $term)
                ->where(function ($q) {
                    $q->whereNull('definition')
                        ->orWhere('definition', '');
                })
                ->update(['definition' => $definition]);
        }

        // --- –°–ß–ò–¢–´–í–ê–ï–ú –ü–û–ó–ò–¶–ò–ò Y ---
        $filePath = storage_path('app/private/diagram.xml');
        $positions = [];

        if (file_exists($filePath)) {
            $xml = simplexml_load_file($filePath);
            $cells = $xml->diagram->mxGraphModel->root->mxCell ?? [];

            foreach ($cells as $cell) {
                $attr = $cell->attributes();
                if (isset($attr['vertex']) && $attr['vertex'] == '1') {
                    $label = (string)($attr['value'] ?? 'Unknown');
                    $geometry = $cell->mxGeometry;
                    $y = isset($geometry['y']) ? floatval($geometry['y']) : 0;
                    $positions[$label] = $y;
                }
            }
        }

        // üî• –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º –≤—Å–µ —Ç–µ—Ä–º—ã –∏–∑ XML (–∏–∑ value —É mxCell)
        $xmlTerms = [];

        if (file_exists($filePath)) {
            $xml = simplexml_load_file($filePath);
            foreach ($xml->diagram->mxGraphModel->root->mxCell as $cell) {
                if ((string)$cell['vertex'] === '1') {
                    $xmlTerms[] = (string)$cell['value'];
                }
            }
        }

// üîÑ –î–æ–±–∞–≤–∏–º —Ç–µ—Ä–º—ã –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç
        $terms = collect($xmlTerms)
            ->merge($relationships->pluck('class1'))
            ->merge($relationships->pluck('class2'))
            ->unique()
            ->values()
            ->sortBy(function ($term) use ($positions) {
                return $positions[$term] ?? INF;
            })
            ->values()
            ->toArray();


        // --- –ü–ï–†–ï–ù–û–°–ò–ú "–ù–∞—á–∞–ª–æ" –∏ "–ö–æ–Ω–µ—Ü" ---
        if (($startKey = array_search('–ù–∞—á–∞–ª–æ', $terms)) !== false) {
            unset($terms[$startKey]);
            array_unshift($terms, '–ù–∞—á–∞–ª–æ');
        }

        if (($endKey = array_search('–ö–æ–Ω–µ—Ü', $terms)) !== false) {
            unset($terms[$endKey]);
            $terms[] = '–ö–æ–Ω–µ—Ü';
        }

        // --- –ì–†–£–ü–ü–ò–†–£–ï–ú –°–í–Ø–ó–ò ---
        $relationshipsGrouped = collect($terms)->mapWithKeys(function ($term) use ($relationships) {
            return [$term => $relationships->filter(function ($rel) use ($term) {
                return $rel->class1 === $term || $rel->class2 === $term;
            })];
        });

        // --- –î–û–°–¢–ê–Å–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ---
        // --- –î–û–°–¢–ê–Å–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ---
        $definitions = [];
        foreach ($terms as $term) {
            $definition = ClassRelationship::where('class1', $term)
                ->whereNotNull('definition')
                ->where('definition', '!=', '')
                ->value('definition');

            $definitions[$term] = $definition ?? ($defaultDefinitions[$term] ?? '');
        }

        // --- –¢–ò–ü–´ –°–í–Ø–ó–ï–ô ---
        $relationshipTypes = ClassRelationship::select('relationship')
            ->distinct()
            ->orderBy('relationship')
            ->pluck('relationship')
            ->toArray();

        $allRelations = [
            '–¶–µ–ª–æ–µ –¥–ª—è', '–ß–∞—Å—Ç—å –æ—Ç',
            '–†–æ–¥–∏—Ç–µ–ª—å –¥–ª—è', '–ù–∞—Å–ª–µ–¥–Ω–∏–∫ –æ—Ç',
            '–¢–∏–ø –¥–ª—è', '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è',
            '–ò–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç', '–ê—Ç—Ä–∏–±—É—Ç –¥–ª—è',
            '–ü—Ä–∏—á–∏–Ω–∞ –¥–ª—è', '–°–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è',
            '–°—Ö–æ–¥—Å—Ç–≤–æ', '–°–º–µ–∂–Ω—ã', '–ö–æ–Ω—Ç—Ä–∞—Å—Ç',
            '–ü–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ-–ø–æ–∑–∂–µ-–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)',
            '–ü–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É',
            '–°–∏–Ω–æ–Ω–∏–º—ã', '–£—á–∞—Å—Ç–≤—É–µ—Ç', '–í—ã–ø–æ–ª–Ω—è–µ—Ç',
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è', '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç'
        ];

        return view('upload', compact(
            'relationshipsGrouped',
            'terms',
            'relationshipTypes',
            'allRelations',
            'definitions'
        ));
    }


    public function upload(Request $request)
    {
        $request->validate([
            'xml_file' => 'required|file',
        ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ XML
        $original = file_get_contents($request->file('xml_file'));
        file_put_contents(storage_path('app/private/diagram.xml'), $original);
        file_put_contents(storage_path('app/private/diagram_original.xml'), $original);

        $xml = new \SimpleXMLElement($original);
        $diagram = $xml->diagram;
        $cells = $diagram->mxGraphModel->root->children();

        ClassRelationship::truncate();

        $nodes = [];
        $edges = [];

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∑–ª—ã
        foreach ($cells as $cell) {
            $attr = $cell->attributes();
            if (isset($attr['vertex']) && $attr['vertex'] == '1') {
                $style = (string)$attr['style'];
                $type = str_contains($style, 'rhombus') ? 'decision' : 'action';

                $nodes[(string)$attr['id']] = [
                    'label' => (string)($attr['value'] ?? 'Unknown'),
                    'type' => $type,
                    'style' => $style
                ];
            } elseif (isset($attr['edge']) && $attr['edge'] == '1') {
                $edges[] = [
                    'source' => (string)$attr['source'],
                    'target' => (string)$attr['target'],
                    'label' => (string)($attr['value'] ?? '')
                ];
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∏
        foreach ($edges as $edge) {
            $source = $nodes[$edge['source']]['label'] ?? 'Unknown';
            $target = $nodes[$edge['target']]['label'] ?? 'Unknown';
            $sourceType = $nodes[$edge['source']]['type'] ?? null;

            $relationship = ($sourceType === 'decision' && !empty($edge['label']))
                ? $edge['label']
                : '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è';

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å–≤—è–∑—å
            ClassRelationship::create([
                'class1' => $source,
                'relationship' => $relationship,
                'class2' => $target,
                'relationship_type' => $sourceType,
            ]);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å "—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if ($relationship === '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è' &&
                !ClassRelationship::where('class1', $target)
                    ->where('class2', $source)
                    ->where('relationship', '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è')
                    ->exists()) {
                ClassRelationship::create([
                    'class1' => $target,
                    'relationship' => '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è',
                    'class2' => $source,
                    'relationship_type' => $sourceType,
                ]);
            }
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ù–∞—á–∞–ª–æ –∏ –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        // –£–¥–∞–ª—è–µ–º –¢–û–õ–¨–ö–û –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ù–∞—á–∞–ª–æ –∏ –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        ClassRelationship::where('class1', '–ù–∞—á–∞–ª–æ')
            ->where('class2', '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è')
            ->where('relationship', '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∑–∂–µ)')
            ->delete();

        ClassRelationship::where('class1', '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è')
            ->where('class2', '–ù–∞—á–∞–ª–æ')
            ->where('relationship', '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)')
            ->delete();


        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
        ClassRelationship::create([
            'class1' => '–ù–∞—á–∞–ª–æ',
            'relationship' => '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∑–∂–µ)',
            'class2' => '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è',
            'relationship_type' => 'action'
        ]);

        ClassRelationship::create([
            'class1' => '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è',
            'relationship' => '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)',
            'class2' => '–ù–∞—á–∞–ª–æ',
            'relationship_type' => 'action'
        ]);

        // --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ ---
        $defaultDefinitions = [
            '–ù–∞—á–∞–ª–æ' => '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
            '–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è' => '–≠—Ç–∞–ø, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.',
            '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?' => '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
            '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å' => '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' => '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –≤–≤–æ–¥–µ.',
            '–ö–æ–Ω–µ—Ü' => '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.'
        ];

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        foreach ($defaultDefinitions as $term => $definition) {
            ClassRelationship::where('class1', $term)
                ->where(function ($q) {
                    $q->whereNull('definition')->orWhere('definition', '');
                })
                ->update(['definition' => $definition]);
        }

        return redirect()->route('xml.index')->with('success', 'XML –¥–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
    }

    public function updateTerm(Request $request)
    {
        $originalTerm = $request->input('term');
        $safeTerm = Str::slug($originalTerm, '_');

        $definition = $request->input("definition_$safeTerm");
        $category = $request->input("relationship_category_$safeTerm");

        ClassRelationship::where('class1', $originalTerm)->update([
            'definition' => $definition,
            'relationship_category' => $category,
        ]);

        return redirect()->back()->with('success', '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
    }


    public function filter(Request $request)
    {
        $positions = [];
        $type = $request->input('filter_type');
        $term = $request->input('term_filter');

        $query = ClassRelationship::query();

        if ($type && $type !== 'all') {
            $query->where('relationship', $type);
        }

        if ($term) {
            $query->where(function ($q) use ($term) {
                $q->where('class1', $term)
                    ->orWhere('class2', $term);
            });
        }

        $relationships = $query->get();

        $terms = $relationships->pluck('class1')
            ->merge($relationships->pluck('class2'))
            ->unique()
            ->values()
            ->sortBy(function ($term) use ($positions) {
                return $positions[$term] ?? INF; // INF ‚Äî —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏ —à–ª–∏ –≤ –∫–æ–Ω–µ—Ü
            })
            ->values()
            ->toArray();

        // –ü–µ—Ä–µ–º–µ—Å—Ç–∏–º "–ù–∞—á–∞–ª–æ" –≤ –Ω–∞—á–∞–ª–æ, –∞ "–ö–æ–Ω–µ—Ü" ‚Äî –≤ –∫–æ–Ω–µ—Ü
        if (($startKey = array_search('–ù–∞—á–∞–ª–æ', $terms)) !== false) {
            unset($terms[$startKey]);
            array_unshift($terms, '–ù–∞—á–∞–ª–æ');
        }

        if (($endKey = array_search('–ö–æ–Ω–µ—Ü', $terms)) !== false) {
            unset($terms[$endKey]);
            $terms[] = '–ö–æ–Ω–µ—Ü';
        }

        $relationshipsGrouped = collect($terms)->mapWithKeys(function ($term) use ($relationships) {
            return [$term => $relationships->where('class1', $term)];
        });


        $relationshipTypes = ClassRelationship::select('relationship')
            ->distinct()
            ->orderBy('relationship')
            ->pluck('relationship')
            ->toArray();

        return view('upload', compact('relationshipsGrouped', 'terms', 'relationshipTypes'));
    }

    public function customUpdateTerm(Request $request)
    {
        $request->validate([
            'term' => 'required|string',
            'definition' => 'nullable|string',
            'relationship_category' => 'nullable|string',
        ]);

        ClassRelationship::where('class1', $request->term)->update([
            'definition' => $request->definition,
            'relationship_category' => $request->relationship_category,
        ]);

        return redirect()->back()->with('success', '–û–±–Ω–æ–≤–ª–µ–Ω–æ!');
    }

    public function resetDefinitions()
    {
        ClassRelationship::query()->update([
            'definition' => null,
            'relationship_category' => null,
        ]);

        return redirect()->back()->with('success', '–í—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.');
    }

    public function updateRelationship(Request $request)
    {
        $request->validate([
            'source' => 'required|string',
            'target' => 'nullable|string',
            'relationship' => 'nullable|string',
            'node_type' => 'nullable|in:action,decision',
            'definition' => 'nullable|string',
            'rename_term' => 'nullable|string'
        ]);

        $oldName = $request->source;
        $newName = $request->rename_term ?: $oldName;

        // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        if ($request->filled('definition') &&
            !$request->filled('rename_term') &&
            !$request->filled('node_type') &&
            !$request->filled('relationship') &&
            !$request->filled('target')) {

            ClassRelationship::where('class1', $oldName)
                ->update(['definition' => $request->definition]);
            return redirect()->route('xml.index')->with('success', '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º XML
        $filePath = storage_path('app/private/diagram.xml');
        if (!file_exists($filePath)) {
            return redirect()->back()->with('error', 'XML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        $xml = simplexml_load_file($filePath);
        if (!$xml || !isset($xml->diagram->mxGraphModel->root)) {
            return redirect()->back()->with('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ XML');
        }

        $root = $xml->diagram->mxGraphModel->root;

        // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∏–º—è —Ç–µ—Ä–º–∏–Ω–∞
        if ($request->filled('rename_term') && $request->rename_term !== $oldName) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            ClassRelationship::where('class1', $oldName)->update(['class1' => $request->rename_term]);
            ClassRelationship::where('class2', $oldName)->update(['class2' => $request->rename_term]);

            // –û–±–Ω–æ–≤–ª—è–µ–º XML
            foreach ($root->mxCell as $cell) {
                if ((string)$cell['vertex'] === '1' && (string)$cell['value'] === $oldName) {
                    $cell['value'] = $request->rename_term;
                }
            }

            $newName = $request->rename_term;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if ($request->filled('definition')) {
            ClassRelationship::where('class1', $newName)
                ->update(['definition' => $request->definition]);
        }

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å —Å–≤—è–∑–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
        if ($request->filled('target')) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
            ClassRelationship::where('class1', $newName)
                ->where('class2', '!=', $request->target)
                ->delete();

            // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
            ClassRelationship::updateOrCreate([
                'class1' => $newName,
                'class2' => $request->target,
            ], [
                'relationship' => $request->relationship,
                'relationship_type' => $request->node_type,
            ]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –≤ XML
            $idMap = [];
            foreach ($root->mxCell as $cell) {
                if ((string)$cell['vertex'] === '1') {
                    $label = (string)$cell['value'];
                    $idMap[$label] = (string)$cell['id'];
                }
            }

            $sourceId = $idMap[$newName] ?? null;
            $targetId = $idMap[$request->target] ?? null;

            if ($sourceId && $targetId) {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–µ–ª–∫–∏
                foreach ($root->mxCell as $i => $cell) {
                    if ((string)$cell['edge'] === '1' &&
                        (string)$cell['source'] === $sourceId) {
                        unset($root->mxCell[$i]);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–µ–ª–∫—É
                $edge = $root->addChild('mxCell');
                $edge->addAttribute('id', 'edge_' . uniqid());
                $edge->addAttribute('edge', '1');
                $edge->addAttribute('source', $sourceId);
                $edge->addAttribute('target', $targetId);
                $edge->addAttribute('style', 'endArrow=block;html=1;');
                $edge->addAttribute('parent', '1');

                $geometry = $edge->addChild('mxGeometry');
                $geometry->addAttribute('relative', '1');
                $geometry->addAttribute('as', 'geometry');
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É–∑–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if ($request->filled('node_type')) {
            foreach ($root->mxCell as $cell) {
                if ((string)$cell['vertex'] === '1' && (string)$cell['value'] === $newName) {
                    $style = (string)$cell['style'];
                    if ($request->node_type === 'decision') {
                        $cell['style'] = str_replace('rounded=1', 'rhombus', $style);
                    } else {
                        $cell['style'] = str_replace('rhombus', 'rounded=1', $style);
                    }
                }
            }
        }

        file_put_contents($filePath, $xml->asXML());

        return redirect()->route('xml.index')->with('success', '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    }

    public function export()
    {
        $filePath = storage_path('app/private/diagram.xml');
        if (!file_exists($filePath)) {
            return back()->with('error', '–§–∞–π–ª diagram.xml –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        $originalXml = simplexml_load_file($filePath);
        if (!$originalXml || !isset($originalXml->diagram->mxGraphModel->root)) {
            return back()->with('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ XML.');
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π XML —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        $xmlString = '<?xml version="1.0"?>
        <mxfile>
            <diagram id="0" name="RebuiltDiagram">
                <mxGraphModel dx="800" dy="800" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100">
                    <root>
                        <mxCell id="0"/>
                        <mxCell id="1" parent="0"/>
                    </root>
                </mxGraphModel>
            </diagram>
        </mxfile>';

        $newXml = new \SimpleXMLElement($xmlString);
        $newRoot = $newXml->diagram->mxGraphModel->root;

        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö
        $blocks = [];
        foreach ($originalXml->diagram->mxGraphModel->root->mxCell as $cell) {
            if ((string)$cell['vertex'] === '1') {
                $blocks[(string)$cell['id']] = [
                    'value' => (string)$cell['value'],
                    'style' => (string)$cell['style'],
                    'geometry' => $cell->mxGeometry
                ];
            }
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã (–±–ª–æ–∫–∏)
        $idMap = [];
        $decisionBlocks = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ä–æ–º–±–∏–∫–æ–≤
        foreach ($blocks as $id => $block) {
            $newCell = $newRoot->addChild('mxCell');
            $newCell->addAttribute('id', $id);
            $newCell->addAttribute('value', $block['value']);
            $newCell->addAttribute('style', $block['style']);
            $newCell->addAttribute('vertex', '1');
            $newCell->addAttribute('parent', '1');

            if ($block['geometry']) {
                $newGeometry = $newCell->addChild('mxGeometry');
                foreach ($block['geometry']->attributes() as $name => $value) {
                    $newGeometry->addAttribute($name, (string)$value);
                }
            }

            $idMap[$block['value']] = $id;

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–æ–º–±–∏–∫–∏
            if (str_contains($block['style'], 'rhombus')) {
                $decisionBlocks[] = $id;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        $relations = ClassRelationship::all();
        $edgeCounter = 1000;

        $normalRelations = [];
        $decisionRelations = [];

        foreach ($relations as $rel) {
            $sourceId = $idMap[$rel->class1] ?? null;
            if (!$sourceId) continue;

            if (in_array($sourceId, $decisionBlocks)) {
                $decisionRelations[] = $rel;
            } else {
                // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤—è–∑—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
                $normalRelations[$rel->class1][] = $rel;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–£ —Å–≤—è–∑—å –æ—Ç –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å–≤—è–∑–∏ ‚Äî –∏ –æ—Ç –æ–±—ã—á–Ω—ã—Ö, –∏ –æ—Ç —Ä–æ–º–±–æ–≤
        foreach ($normalRelations as $rels) {
            foreach ($rels as $rel) {
                $this->addEdge($newRoot, $idMap, $rel, $edgeCounter++);
            }
        }
        foreach ($decisionRelations as $rel) {
            $this->addEdge($newRoot, $idMap, $rel, $edgeCounter++);
        }


//        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤—è–∑—å
//        $usedSources = [];
//        // –î–ª—è —Ä–æ–º–±–∏–∫–æ–≤ - –≤—Å–µ —Å–≤—è–∑–∏
//        $decisionRelations = [];
//
//        foreach ($relations as $rel) {
//            if (in_array($idMap[$rel->class1] ?? null, $decisionBlocks)) {
//                $decisionRelations[] = $rel;
//            } else {
//                $usedSources[$rel->class1] = $rel;
//            }
//        }

//        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é)
//        foreach ($usedSources as $rel) {
//            $this->addEdge($newRoot, $idMap, $rel, $edgeCounter++);
//        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        $dom = new \DOMDocument('1.0');
        $dom->preserveWhiteSpace = false;
        $dom->formatOutput = true;
        $dom->loadXML($newXml->asXML());

        return response($dom->saveXML(), 200, [
            'Content-Type' => 'application/xml',
            'Content-Disposition' => 'attachment; filename="diagram_rebuilt.xml"',
        ]);
    }

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
    private function addEdge($root, $idMap, $relation, $edgeId)
    {
        // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
        if (in_array($relation->relationship, ['—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è', '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)'])) {
            return;
        }

        $sourceId = $idMap[$relation->class1] ?? null;
        $targetId = $idMap[$relation->class2] ?? null;

        if (!$sourceId || !$targetId) {
            return;
        }

        // –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–µ–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å
        foreach ($root->mxCell as $cell) {
            if ((string)$cell['edge'] === '1' &&
                (string)$cell['source'] === $sourceId &&
                (string)$cell['target'] === $targetId) {
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
        $edge = $root->addChild('mxCell');
        $edge->addAttribute('id', 'edge_' . $edgeId);
        $edge->addAttribute('edge', '1');
        $edge->addAttribute('source', $sourceId);
        $edge->addAttribute('target', $targetId);

        if (in_array($sourceId, $this->getDecisionBlockIds($root))) {
            $edge->addAttribute('style', 'endArrow=block;html=1;label=' . $relation->relationship);
        } else {
            $edge->addAttribute('style', 'endArrow=block;html=1;');
        }

        $edge->addAttribute('parent', '1');
        $geometry = $edge->addChild('mxGeometry');
        $geometry->addAttribute('relative', '1');
        $geometry->addAttribute('as', 'geometry');
    }



// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ä–æ–º–±–∏–∫–æ–≤
    private function getDecisionBlockIds($root)
    {
        $ids = [];
        foreach ($root->mxCell as $cell) {
            if ((string)$cell['vertex'] === '1' && str_contains((string)$cell['style'], 'rhombus')) {
                $ids[] = (string)$cell['id'];
            }
        }
        return $ids;
    }

    public function showTerm($term)
    {
        $term = str_replace('__qm__', '?', $term);

        $exists = ClassRelationship::where('class1', $term)
            ->orWhere('class2', $term)
            ->exists();

        if (!$exists) {
            abort(404, '–¢–µ—Ä–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        $outgoing = ClassRelationship::where('class1', $term)->get();

        $incoming = ClassRelationship::where('class2', $term)
            ->whereIn('relationship', ['—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è', '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)', '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∑–∂–µ)'])
            ->get();

// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—Ö–æ–¥—è—â—É—é —Å–≤—è–∑—å –æ—Ç "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        $extra = collect();
        if (in_array($term, ['–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'])) {
            $extra = ClassRelationship::where('class1', '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?')
                ->where('class2', $term)
                ->where('relationship', '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è')
                ->get();
        }

        $incoming = $incoming->merge($extra);

        // –£–¥–∞–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö
        $filteredIncoming = $incoming->reject(function ($incomingRel) use ($outgoing) {
            return $outgoing->contains(function ($out) use ($incomingRel) {
                return $out->class2 === $incomingRel->class1 &&
                    $out->relationship === $this->inverseRelation($incomingRel->relationship);
            });
        });

        $relationships = $outgoing->merge($filteredIncoming)->values();

        $definition = ClassRelationship::where('class1', $term)
            ->whereNotNull('definition')
            ->value('definition') ?? '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.';

        $terms = ClassRelationship::pluck('class1')
            ->merge(ClassRelationship::pluck('class2'))
            ->unique()
            ->values()
            ->toArray();

        if (($startKey = array_search('–ù–∞—á–∞–ª–æ', $terms)) !== false) {
            unset($terms[$startKey]);
            array_unshift($terms, '–ù–∞—á–∞–ª–æ');
        }
        if (($endKey = array_search('–ö–æ–Ω–µ—Ü', $terms)) !== false) {
            unset($terms[$endKey]);
            $terms[] = '–ö–æ–Ω–µ—Ü';
        }

        $index = array_search($term, $terms);
        $prevTerm = $terms[$index - 1] ?? null;
        $nextTerm = $terms[$index + 1] ?? null;

        return view('term', compact('term', 'definition', 'relationships', 'prevTerm', 'nextTerm'));
    }

// üí° –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–≤—è–∑–∏
    private function inverseRelation($rel)
    {
        return match ($rel) {
            '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è' => '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è',
            '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è' => '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è',
            '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)' => '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∑–∂–µ)',
            '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∑–∂–µ)' => '–ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–Ω—å—à–µ)',
            default => $rel,
        };
    }



    public function resetAll()
    {
        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        $originalPath = storage_path('app/private/diagram_original.xml');
        $diagramPath = storage_path('app/private/diagram.xml');

        if (!file_exists($originalPath)) {
            return back()->with('error', '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π XML –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        copy($originalPath, $diagramPath);

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–µ–π
        ClassRelationship::truncate();

        // –ó–∞–≥—Ä—É–∑–∫–∞ XML
        $xml = simplexml_load_file($diagramPath);
        $cells = $xml->diagram->mxGraphModel->root->children();

        $nodes = [];
        $edges = [];

        foreach ($cells as $cell) {
            $attr = $cell->attributes();
            if (isset($attr['vertex']) && $attr['vertex'] == '1') {
                $style = (string)$attr['style'];
                $type = str_contains($style, 'rhombus') ? 'decision' : 'action';

                $nodes[(string)$attr['id']] = [
                    'label' => (string)($attr['value'] ?? 'Unknown'),
                    'type' => $type,
                ];
            } elseif (isset($attr['edge']) && $attr['edge'] == '1') {
                $edges[] = [
                    'source' => (string)$attr['source'],
                    'target' => (string)$attr['target'],
                    'label' => (string)($attr['value'] ?? '')
                ];
            }
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
        foreach ($edges as $edge) {
            $source = $nodes[$edge['source']]['label'] ?? 'Unknown';
            $target = $nodes[$edge['target']]['label'] ?? 'Unknown';
            $sourceType = $nodes[$edge['source']]['type'] ?? null;

            $relationship = ($sourceType === 'decision' && !empty($edge['label']))
                ? $edge['label']
                : '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è';

            ClassRelationship::create([
                'class1' => $source,
                'relationship' => $relationship,
                'class2' => $target,
                'relationship_type' => $sourceType,
            ]);

            if ($relationship === '–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è') {
                ClassRelationship::create([
                    'class1' => $target,
                    'relationship' => '—Å–ª–µ–¥—Å—Ç–≤–∏–µ –¥–ª—è',
                    'class2' => $source,
                    'relationship_type' => $sourceType,
                ]);
            }
        }
        return redirect()->route('xml.index')->with('success', '–î–∞–Ω–Ω—ã–µ –∏ —Å—Ö–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ XML.');
    }
}
